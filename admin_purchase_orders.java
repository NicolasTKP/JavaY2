/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.JavaY2;

import com.mycompany.JavaY2.Class.*;
import com.mycompany.JavaY2.Object.ObjectList;
import com.mycompany.JavaY2.Object.SessionManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 *
 * @author acer
 */
public class admin_purchase_orders extends javax.swing.JFrame {

    /**
     * Creates new form admin_purchase_orders
     */
    public admin_purchase_orders() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ObjectList objectList = new ObjectList();
        List<ObjectList.PurchaseOrder> orders = objectList.getPurchaseOrders();
        String[][] matrix = new String[orders.size()][10];
        ObjectList.PurchaseOrder order;
        for (int i = 0;i<orders.size();i++){
            order = orders.get(i);
            matrix[i][0] = order.order_id;
            matrix[i][1] = order.request_id;
            matrix[i][2] = order.item_name;
            matrix[i][3] = order.username;
            matrix[i][4] = Integer.toString(order.quantity);
            matrix[i][5] = Double.toString(order.unit_price);
            matrix[i][6] = Double.toString(order.amount);
            matrix[i][7] = order.supplier_name;
            matrix[i][8] = order.order_date.toString();
            matrix[i][9] = order.order_status;
        }
        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            matrix,
            new String [] {
                "Order_ID", "Request_ID", "Item_Name", "Username","Quantity","Unit_Price","Amount","Supplier","Order_Date","Order_Status"
            }
        ){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // This makes all cells non-editable
            }
        }
    );
    jTable1.setRowHeight(25);
    jScrollPane1.setViewportView(jTable1);

    jButton1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
    jButton1.setText("Approve");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButton2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
    jButton2.setText("Reject");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jTextField1.setText("");

    jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel1.setText("Search:");

    jButton3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton3.setText("Search");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    jButton4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton4.setText("Delete");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    jButton5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton5.setText("Add");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });

    jButton6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton6.setText("Modify");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(64, 64, 64)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1372, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(64, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(21, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(18, 18, 18)))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(null, "Please select a row to approve", "Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            Object order_id = jTable1.getValueAt(selectedRow,0);
            Edit.purchaseOrders(order_id.toString(),9,"Approved");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setValueAt("Approved",selectedRow,9);
            JOptionPane.showMessageDialog(null, "Successfully Approved The Purchase Order", "Successful", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(null, "Please select a row to reject", "Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            Object order_id = jTable1.getValueAt(selectedRow,0);
            Edit.purchaseOrders(order_id.toString(),9,"Rejected");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setValueAt("Rejected",selectedRow,9);
            JOptionPane.showMessageDialog(null, "Successfully Rejected The Purchase Order", "Successful", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String keyword = jTextField1.getText().toLowerCase();
        if (keyword.isEmpty()) {
            ObjectList objectList = new ObjectList();
            List<ObjectList.PurchaseOrder> orders = objectList.getPurchaseOrders();
            String[][] matrix = new String[orders.size()][10];
            ObjectList.PurchaseOrder order;
            for (int i = 0; i < orders.size(); i++) {
                order = orders.get(i);
                matrix[i][0] = order.order_id;
                matrix[i][1] = order.request_id;
                matrix[i][2] = order.item_name;
                matrix[i][3] = order.username;
                matrix[i][4] = Integer.toString(order.quantity);
                matrix[i][5] = Double.toString(order.unit_price);
                matrix[i][6] = Double.toString(order.amount);
                matrix[i][7] = order.supplier_name;
                matrix[i][8] = order.order_date.toString();
                matrix[i][9] = order.order_status;
            }
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                 matrix,
                 new String [] {
                         "Order_ID", "Request_ID", "Item_Name", "Username","Quantity","Unit_Price","Amount","Supplier","Order_Date","Order_Status"
                 }
             ){
                 @Override
                 public boolean isCellEditable(int row, int column) {
                     return false; // This makes all cells non-editable
                 }
             }
            );
        }else{
            ObjectList objectList = new ObjectList();
            List<ObjectList.PurchaseOrder> orders = objectList.getPurchaseOrders();
            String[][] matrix = new String[orders.size()][10];
            ObjectList.PurchaseOrder order;
            for (int i = 0; i < orders.size(); i++) {
                order = orders.get(i);
                if (Query.anyMatchOrder(order,keyword)) {
                    matrix[i][0] = order.order_id;
                    matrix[i][1] = order.request_id;
                    matrix[i][2] = order.item_name;
                    matrix[i][3] = order.username;
                    matrix[i][4] = Integer.toString(order.quantity);
                    matrix[i][5] = Double.toString(order.unit_price);
                    matrix[i][6] = Double.toString(order.amount);
                    matrix[i][7] = order.supplier_name;
                    matrix[i][8] = order.order_date.toString();
                    matrix[i][9] = order.order_status;
                }
            }
            matrix = Matrix.removeEmptyRows(matrix);
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                                     matrix,
                                     new String [] {
                                             "Order_ID", "Request_ID", "Item_Name", "Username","Quantity","Unit_Price","Amount","Supplier","Order_Date","Order_Status"
                                     }
                             ){
                                 @Override
                                 public boolean isCellEditable(int row, int column) {
                                     return false; // This makes all cells non-editable
                                 }
                             }
            );
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String[] purchase_order = new String[11];

        //Order ID
        purchase_order[0] = Query.getLatestOrderID();

        //Request ID
        String[] options = Query.getPendingPR();
        if (options.length>0){
            String choice = (String) JOptionPane.showInputDialog(
                    null,
                    "Select an option:",
                    "Dropdown Selection",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);
            if (choice!=null){
                purchase_order[1] = choice;
            }else {
                JOptionPane.showMessageDialog(null, "Canceled", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }else {
            JOptionPane.showMessageDialog(null, "No pending PR", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Item ID
        purchase_order[2] = Search.getFromPR(purchase_order[1],1);

        //User ID
        purchase_order[3] = SessionManager.getInstance().userID;

        //Quantity
        purchase_order[4] = Search.getFromPR(purchase_order[1], 3);

        //unit price
        purchase_order[5] = Search.getFromInventory(purchase_order[2], 3);

        //Amount
        assert purchase_order[4] != null;
        assert purchase_order[5] != null;
        purchase_order[6] = Double.toString(Double.parseDouble(purchase_order[4]) * Double.parseDouble(purchase_order[5]));

        //Supplier ID
        purchase_order[7] = Search.getFromPR(purchase_order[1], 6);

        //Order Date
        LocalDate today = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyyyy");
        purchase_order[8] = today.format(formatter);;

        //Order Status
        purchase_order[9] = "Pending";

        //Payment Status
        purchase_order[10] = "-";

        int result = JOptionPane.showConfirmDialog(null, "Do you want to raise a purchase order based of PR: "+ purchase_order[1], "Confirmation", JOptionPane.YES_NO_OPTION);

        if(result == JOptionPane.YES_OPTION){
            TextFile.addLine("src/main/java/com/mycompany/JavaY2/TextFile/purchase_orders", String.join("|",purchase_order));
            Edit.purchaseRequisitions(purchase_order[1], 7,"Approved");
            JOptionPane.showMessageDialog(null, "Purchase Order Place Successfully", "Successful", JOptionPane.INFORMATION_MESSAGE);
            ObjectList objectList = new ObjectList();
            List<ObjectList.PurchaseOrder> orders = objectList.getPurchaseOrders();
            String[][] matrix = new String[orders.size()][10];
            ObjectList.PurchaseOrder order;
            for (int i = 0;i<orders.size();i++){
                order = orders.get(i);
                matrix[i][0] = order.order_id;
                matrix[i][1] = order.request_id;
                matrix[i][2] = order.item_name;
                matrix[i][3] = order.username;
                matrix[i][4] = Integer.toString(order.quantity);
                matrix[i][5] = Double.toString(order.unit_price);
                matrix[i][6] = Double.toString(order.amount);
                matrix[i][7] = order.supplier_name;
                matrix[i][8] = order.order_date.toString();
                matrix[i][9] = order.order_status;
            }
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                                     matrix,
                                     new String [] {
                                             "Order_ID", "Request_ID", "Item_Name", "Username","Quantity","Unit_Price","Amount","Supplier","Order_Date","Order_Status"
                                     }
                             ){
                                 @Override
                                 public boolean isCellEditable(int row, int column) {
                                     return false;
                                 }
                             }
            );
        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(admin_purchase_orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(admin_purchase_orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(admin_purchase_orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(admin_purchase_orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new admin_purchase_orders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
