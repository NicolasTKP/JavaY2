/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.JavaY2.AdminGUI;

import com.mycompany.JavaY2.Class.*;
import com.mycompany.JavaY2.Object.ObjectList;
import com.mycompany.JavaY2.Object.PurchaseRequisition;
import com.mycompany.JavaY2.Object.SessionManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

/**
 *
 * @author acer
 */
public class admin_purchase_requisition extends javax.swing.JFrame {

    /**
     * Creates new form admin_purchase_requisition
     */
    public admin_purchase_requisition() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ObjectList objectList = new ObjectList();
        List<PurchaseRequisition> purchase_requisitions = objectList.getPurchaseRequisitions();
        String[][] matrix = new String[purchase_requisitions.size()][7];
        PurchaseRequisition purchase_requisition;
        for (int i = 0;i<purchase_requisitions.size();i++){
            purchase_requisition = purchase_requisitions.get(i);
            matrix[i][0] = purchase_requisition.request_id;
            matrix[i][1] = purchase_requisition.item_name;
            matrix[i][2] = Search.getUsername(purchase_requisition.user_id);
            matrix[i][3] = Integer.toString(purchase_requisition.quantity);
            matrix[i][4] = purchase_requisition.request_date;
            matrix[i][5] = purchase_requisition.required_date;
            matrix[i][6] = purchase_requisition.status;
        }
        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            matrix,
            new String [] {
                "Request ID", "Item Name", "Username", "Quantity", "Request Date", "Required Date", "Status"}
        ){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        }
    );
    jTable1.setRowHeight(25);
    jScrollPane1.setViewportView(jTable1);

    jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Purchase Requisition");

    jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel2.setText("Search:");

    jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jTextField1.setText("");

    jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton1.setText("Search");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton2.setText("Add");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jButton3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton3.setText("Delete");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    jButton4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton4.setText("Edit");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            try {
                jButton4ActionPerformed(evt);
            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
        }
    });

    jButton5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    jButton5.setText("<");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap(60, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1373, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(100, 100, 100)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(67, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(23, 23, 23)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(20, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String keyword = jTextField1.getText().toLowerCase();
        if (keyword.isEmpty()) {
            UpdateTable.forPR(jTable1);
        }else{
            ObjectList objectList = new ObjectList();
            List<PurchaseRequisition> purchase_requisitions = objectList.getPurchaseRequisitions();
            String[][] matrix = new String[purchase_requisitions.size()][7];
            PurchaseRequisition purchase_requisition;
            for (int i = 0; i < purchase_requisitions.size(); i++) {
                purchase_requisition = purchase_requisitions.get(i);
                if (purchase_requisition.anyMatch(keyword)) {
                    purchase_requisition = purchase_requisitions.get(i);
                    matrix[i][0] = purchase_requisition.request_id;
                    matrix[i][1] = purchase_requisition.item_name;
                    matrix[i][2] = Search.getUsername(purchase_requisition.user_id);
                    matrix[i][3] = Integer.toString(purchase_requisition.quantity);
                    matrix[i][4] = purchase_requisition.request_date;
                    matrix[i][5] = purchase_requisition.required_date;
                    matrix[i][6] = purchase_requisition.status;
                }
            }
            matrix = Matrix.removeEmptyRows(matrix);
            jTable1.setModel(new DefaultTableModel(
                                     matrix,
                                     new String [] {
                                             "Request ID", "Item Name", "Username", "Quantity", "Request Date", "Required Date", "Status"
                                     }
                             ){
                                 @Override
                                 public boolean isCellEditable(int row, int column) {
                                     return false; // This makes all cells non-editable
                                 }
                             }
            );
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Request ID
        String request_id = Query.getLatestRequestID();

        //Group ID
        String group_id;
        String item_name;
        while (true){
            item_name = JOptionPane.showInputDialog("Insert Item Name");
            if (item_name==null){
                return;
            }else if(!ValidateFormat.itemName(item_name)){
                group_id = Search.getGroupIDbyItemName(item_name);
                break;
            }else {
                JOptionPane.showMessageDialog(null, "The item name doesn't exist", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }

        //User ID
        String user_id = SessionManager.getInstance().userID;

        //Quantity
        String quantity;
        while (true){
            quantity = JOptionPane.showInputDialog("Insert Quantity");
            if (quantity==null){
                return;
            }else if(ValidateFormat.quantityUnit(quantity)){
                break;
            }else {
                JOptionPane.showMessageDialog(null, "Invalid format for quantity, please try again", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }

        //Request Date
        String request_date = Query.getCurrectDate();

        //Required Date
        String required_date;
        while (true){
            required_date = JOptionPane.showInputDialog("Insert Required Date");
            if (required_date==null){
                return;
            }else if(ValidateFormat.date(required_date)){
                break;
            }else {
                JOptionPane.showMessageDialog(null, "Invalid format for date, please try again (eg:01052025)", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }

        int result = JOptionPane.showConfirmDialog(null, "Confirm to add a new PR of: "+item_name+ "?", "Confirmation",JOptionPane.YES_NO_OPTION);
        if(result == JOptionPane.YES_OPTION){
            String line = request_id + "|" + group_id + "|" + user_id + "|" + quantity+ "|" + request_date + "|" + required_date + "|" + "Pending";
            TextFile.addLine("src/main/java/com/mycompany/JavaY2/TextFile/purchase_requisitions", line);
            JOptionPane.showMessageDialog(null, "The PR added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            UpdateTable.forPR(jTable1);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selected_row = jTable1.getSelectedRow();
        if (selected_row == -1){
            JOptionPane.showMessageDialog(null, "Please select a row to delete", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String request_id = jTable1.getValueAt(selected_row,0).toString();
        int result = JOptionPane.showConfirmDialog(null, "Confirm to delete PR: "+request_id+ "?", "Confirmation",JOptionPane.YES_NO_OPTION);
        if(result == JOptionPane.YES_OPTION){
            TextFile.deleteLine("src/main/java/com/mycompany/JavaY2/TextFile/purchase_requisitions", request_id, 0);
            JOptionPane.showMessageDialog(null, "The PR deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            UpdateTable.forPR(jTable1);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) throws ParseException {//GEN-FIRST:event_jButton4ActionPerformed
        int selected_row = jTable1.getSelectedRow();
        if (selected_row == -1){
            JOptionPane.showMessageDialog(null, "Please select a row to edit", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String request_id = jTable1.getValueAt(selected_row,0).toString();
        String status = jTable1.getValueAt(selected_row, 6).toString();
        if (status.equals("Approved")){
            JOptionPane.showMessageDialog(null, "Cannot edit a PR that already approved", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String[] options = {"Item Name", "Quantity", "Request Date", "Required Date", "Username"};
        String choice = (String) JOptionPane.showInputDialog(
                null,
                "Select an option:",
                "Dropdown Selection",
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        if (choice == null){
            return;
        }
        switch(choice){
            case "Item Name":
                String group_id;
                String item_name;
                while (true){
                    item_name = JOptionPane.showInputDialog("Insert Item Name");
                    if (item_name==null){
                        return;
                    }else if(!ValidateFormat.itemName(item_name)){
                        group_id = Search.getGroupIDbyItemName(item_name);
                        break;
                    }else {
                        JOptionPane.showMessageDialog(null, "The item name doesn't exist", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                }
                int result = JOptionPane.showConfirmDialog(null, "Confirm to update item name to: "+item_name+ "?", "Confirmation",JOptionPane.YES_NO_OPTION);
                if(result == JOptionPane.YES_OPTION){
                    Edit.purchaseRequisitions(request_id, 1, group_id);
                    JOptionPane.showMessageDialog(null, "The item name updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    UpdateTable.forPR(jTable1);
                }
                break;

            case "Quantity":
                String quantity;
                while (true){
                    quantity = JOptionPane.showInputDialog("Insert Quantity");
                    if (quantity==null){
                        return;
                    }else if(ValidateFormat.quantityUnit(quantity)){
                        break;
                    }else {
                        JOptionPane.showMessageDialog(null, "Invalid format for quantity, please try again", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                }
                int result2 = JOptionPane.showConfirmDialog(null, "Confirm to update item quantity to: "+quantity+ "?", "Confirmation",JOptionPane.YES_NO_OPTION);
                if(result2 == JOptionPane.YES_OPTION){
                    Edit.purchaseRequisitions(request_id,3, quantity);
                    JOptionPane.showMessageDialog(null, "The item quantity updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    UpdateTable.forPR(jTable1);
                }
                break;

            case "Request Date":
                String date;
                String required_date = jTable1.getValueAt(selected_row,5).toString();
                SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
                while (true){
                    date = JOptionPane.showInputDialog("Insert Request Date");
                    if (date==null){
                        return;
                    } else if(ValidateFormat.date(date)){
                        if (sdf.parse(date).before(sdf.parse(required_date))){
                            break;
                        }
                        JOptionPane.showMessageDialog(null, "Request date must be earlier than required date, please try again", "Warning", JOptionPane.WARNING_MESSAGE);
                    }else {
                        JOptionPane.showMessageDialog(null, "Invalid format for date, please try again (eg:01052025)", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                }
                int result3 = JOptionPane.showConfirmDialog(null, "Confirm to update date to: "+date+ "?", "Confirmation",JOptionPane.YES_NO_OPTION);
                if(result3 == JOptionPane.YES_OPTION){
                    Edit.purchaseRequisitions(request_id,4, date);
                    JOptionPane.showMessageDialog(null, "The request date updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    UpdateTable.forPR(jTable1);
                }
                break;

            case "Required Date":
                String request_date = jTable1.getValueAt(selected_row,4).toString();
                SimpleDateFormat sdf2 = new SimpleDateFormat("ddMMyyyy");
                while (true){
                    date = JOptionPane.showInputDialog("Insert Required Date");
                    if (date==null){
                        return;
                    } else if(ValidateFormat.date(date)){
                        if (sdf2.parse(date).after(sdf2.parse(request_date))){
                            break;
                        }
                        JOptionPane.showMessageDialog(null, "Required date must be later than request date, please try again", "Warning", JOptionPane.WARNING_MESSAGE);
                    }else {
                        JOptionPane.showMessageDialog(null, "Invalid format for date, please try again (eg:01052025)", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                }
                int result4 = JOptionPane.showConfirmDialog(null, "Confirm to update date to: "+date+ "?", "Confirmation",JOptionPane.YES_NO_OPTION);
                if(result4 == JOptionPane.YES_OPTION){
                    Edit.purchaseRequisitions(request_id,5, date);
                    JOptionPane.showMessageDialog(null, "The required date updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    UpdateTable.forPR(jTable1);
                }
                break;

            case "Username":
                while (true){
                    String username = JOptionPane.showInputDialog("Enter Username:");
                    if(username == null || username.isEmpty()){
                        return;
                    }
                    else if(Query.ifUserExist(username)){
                        int result5 = JOptionPane.showConfirmDialog(null, "Do you want change username to: " + username, "Confirmation", JOptionPane.YES_NO_OPTION);

                        if(result5 == JOptionPane.YES_OPTION) {
                            String userID = Search.getUserID(username);
                            Edit.purchaseRequisitions(request_id, 2, userID);
                            JOptionPane.showMessageDialog(null, "Successfully update the username", "Successful", JOptionPane.INFORMATION_MESSAGE);
                            UpdateTable.forPR(jTable1);
                        }

                        break;
                    }else{
                        JOptionPane.showMessageDialog(null, "User doesn't exist please try again", "Warning", JOptionPane.WARNING_MESSAGE);

                    }
                }
                break;

            default:
                return;
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        admin_mainpage page = new admin_mainpage();
        page.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(admin_purchase_requisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(admin_purchase_requisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(admin_purchase_requisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(admin_purchase_requisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new admin_purchase_requisition().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
